services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME:-MLAgent_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml_agent_network

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ml_agent_network

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME:-MLAgent_db}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ml_agent_network

  session_service:
    build:
      context: ./session_service
      dockerfile: Dockerfile
    container_name: session_service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME:-MLAgent_db}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
    ports:
      - "8006:8006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ml_agent_network

  file_service:
    build:
      context: ./file_service
      dockerfile: Dockerfile
    container_name: file_service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME:-MLAgent_db}
      - REDIS_URL=redis://redis:6379
      - LOCAL_STORAGE_PATH=/app/uploads
    ports:
      - "8002:8002"
    volumes:
      - file_storage:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ml_agent_network

  agent_service:
    build:
      context: ./agent_service
      dockerfile: Dockerfile
    container_name: agent_service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME:-MLAgent_db}
      - REDIS_URL=redis://redis:6379
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ml_agent_network

  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
    ports:
      - "8003:8003"
    depends_on:
      - auth_service
      - session_service
      - file_service
      - agent_service
    restart: unless-stopped
    networks:
      - ml_agent_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8003
    container_name: frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8003
    ports:
      - "3000:3000"
    depends_on:
      - api_gateway
    restart: unless-stopped
    networks:
      - ml_agent_network

volumes:
  postgres_data:
  redis_data:
  file_storage:

networks:
  ml_agent_network:
    driver: bridge
"""
This module defines the `VisualizationDisplayNode` class, which is responsible
for displaying visualization results generated by the AI agent system.

Core responsibilities:
    - Use a RunnableLambda to wrap visualization output in an AIMessage.
    - Trigger visualization rendering with the appropriate metadata.
    - Update the agent state by removing the completed subtask from the queue.
"""

from langchain.schema import AIMessage
from langchain.schema.runnable import RunnableLambda

from agents.state import AgentState


class VisualizationDisplayNode:
    """
    Node for displaying visualization results in the agent workflow.

    Responsibilities:
        - Wrap the visualization content in an AIMessage for rendering.
        - Invoke the RunnableLambda with image metadata.
        - Update the agent state by removing the executed subtask.
    """

    @staticmethod
    def invoke(state: AgentState) -> AgentState:
        """
        Display the current visualization and update the agent state.

        Args:
            state: The current state of the agent, which includes:
                - visualization: The visualization content to display.
                - subtasks: Queue of remaining subtasks.

        Returns:
            AgentState: The updated state after displaying the visualization
                        and removing the completed subtask.
        """

        print("* VisualizationDisplayMode -> ")

        # Wrap the visualization content in an AIMessage for rendering
        visualization_display_model = RunnableLambda(
            lambda _: AIMessage(
                content=state.visualization, additional_kwargs={}, response_metadata={}
            )
        )
        # Invoke the model to display the visualization with image metadata
        visualization_display_model.invoke("...", config={"metadata": {"image": True}})

        # Remove the completed subtask from the queue
        state.subtasks.popleft()

        return state
